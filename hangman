num_of_tries = 0
MAX_TRIES = 6
HANGMAN_PHOTOS = {'1': """    x-------x""", '2': """
    x-------x
    |
    |
    |
    |
    |""", '3':"""
    x-------x
    |       |
    |       0
    |
    |
    |""", '4': """
    x-------x
    |       |
    |       0
    |       |
    |
    |""", '5': """
    x-------x
    |       |
    |       0
    |      /|\\
    |
    |""", '6': """
    x-------x
    |       |
    |       0
    |      /|\\
    |      /
    |""", '7': """
    x-------x
    |       |
    |       0
    |      /|\\
    |      / \\
    |"""}
    
def print_hangman(num_of_tries):
    """Prints hangman state, according to input nunmer.
    :param: num_of_tries: define the state to be displayed
    :type: int
    """
    print(HANGMAN_PHOTOS[str(num_of_tries+1)])


def opening_screen():
    """this function prints the opening screen of the Hangman game.
    :return: Hangman game opening screen
    """
    print ("Welcome to Hangman game! ") 
    print("""  _    _                                         
 | |  | |                                        
 | |__| | __ _ _ __   __ _ _ __ ___   __ _ _ __  
 |  __  |/ _` | '_ \ / _` | '_ ` _ \ / _` | '_ \ 
 | |  | | (_| | | | | (_| | | | | | | (_| | | | |
 |_|  |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|
                      __/ |                      
                     |___/""")
    print (MAX_TRIES)

    
def choose_word(file_path, index):
    """Choosing word from a text file.
    :param file_path: file's path location
    :param index: selected word's index
    :type file_path: string
    :type index: int
    :return: The selected word
    :rtype: string
    """
    try:
        with open(file_path, "r") as file:
            content = file.read()
            if not content:  # בדיקה האם התוכן ריק
                print("could'nt read content, try again")
                return None
    except FileNotFoundError:
        print("File not found, please provide a valid file path.")
        return None 
    content_list = content.split()        
    count,i = 0,0
    words_list = []
    one_circle = False 
    while index >= 1 or not one_circle:
        if i == len(content_list):
            one_circle = True
            i = 0
        word = content_list[i] 
        if word not in words_list and not one_circle:
            words_list.append(word)
            count+=1 
        if index == 1:
            founded_word = word            
        index-=1
        i+=1  
    return founded_word


def check_win(secret_word, old_letters_guessed):
    """check if the user win the game or not
    :param secret_word: user's chosen word
    :param old_letters_guessed: List of guessed letters
    :type secret_word: String
    :type old_letters_guessed: list
    :return: true if the user guessed all the leter in the word of false if not
    :rtype: bool
    """
    for letter in secret_word:
        if letter.upper() not in old_letters_guessed and letter.lower() not in old_letters_guessed:
             return False
    print("""
 ____      ____  _____  ____  _____  
|_  _|    |_  _||_   _||_   \|_   _| 
  \ \  /\  / /    | |    |   \ | |   
   \ \/  \/ /     | |    | |\ \| |   
    \  /\  /     _| |_  _| |_\   |_  
     \/  \/     |_____||_____|\____| 
                                     """)
    return True 
     
def check_valid_input(letter_guessed, old_letters_guessed):
    """this function get a string param and list of letter that the user alredy guessed
    and check's if the the letter is from alphabet
    and also check's if the letter is not a sign and return treu if the letter is good
    and also check's if the user already guessed this letter.
    and false if its not.
    :param letter_guessed: guessed letter from the user
    :type letter_guessed: string
    :return: true if the letter is correct false if it's not
    :rtype:bool
    """
    if len(letter_guessed) > 1 or not letter_guessed.isalpha(): 
        return False
    if letter_guessed.upper() in old_letters_guessed or letter_guessed.lower() in old_letters_guessed:
        return False
    return True

def try_update_letter_guessed(letter_guessed, old_letters_guessed):
    """this function get a letter from the user and a list of letter that the user already guessed,
    and check's if the letter is new it will append the letter to the list of the letter allredy guessed and print 'X' and under the list of letter that guessed with -> between them
    :param letter_guessed: letter from the user
    :param old_letter_guessed: list of letter allredy guessed
    :type letter_guessed: string
    :type old_letter_guessed: list
    :return: true or false
    :rtype: bool
    """
    response = check_valid_input(letter_guessed, old_letters_guessed)
    if response:
        old_letters_guessed.append(letter_guessed.lower())
        return True
    else:
        old_letters_guessed.sort()
        arrows_string = ' -> '.join(old_letters_guessed)
        print(f"X\n{arrows_string}") 
        return False 

def show_hidden_word(secret_word, old_letters_guessed):
    """show the status of the hiiden word.
    :param secret_word: user's chosen word
    :param old_letters_guessed: List of guessed letters
    :type secret_word: String
    :type old_letters_guessed:list
    :return: variable 'result' which contain the status of the letter allready gussed
    :rtype: str
    """
    result = ""
    for letter in secret_word:
        if letter.lower() in old_letters_guessed or letter.upper() in old_letters_guessed:
            result += (letter+" ")
        else:
            result += "_ "
    return result
    
def print_lose():
    """this function prints lose to the user.
    """
    print("""
  _____       ___     ______   ________  
 |_   _|    .'   `. .' ____ \ |_   __  | 
   | |     /  .-.  \| (___ \_|  | |_ \_| 
   | |   _ | |   | | _.____`.   |  _| _  
  _| |__/ |\  `-'  /| \____) | _| |__/ | 
 |________| `.___.'  \______.'|________| 
                                        """)
                                        
def main():
    global num_of_tries
    global secret_word
    opening_screen()
    secret_word = None
    #get input until path is valid 
    while secret_word == None:
        path = input(r"Please enter file path: ").lower()
        index = int(input("Please enter index: "))
        secret_word = choose_word(path, index) 
    old_letters_guessed = []
    print ("Let's start!")
    print_hangman (num_of_tries)
    is_win, letter_succeed = False, False
    print (show_hidden_word (secret_word, old_letters_guessed))
    #play until you have more tries and you didn't win yet
    while num_of_tries < MAX_TRIES and not is_win:
        #guess letter until the guessing is valid 
        while not letter_succeed:
            User_Guess = input('Guess a letter: ')
            letter_succeed = try_update_letter_guessed(User_Guess, old_letters_guessed)
        letter_succeed = False    
        #check if guess is correct 
        if User_Guess.lower() not in secret_word and User_Guess.upper() not in secret_word:
            print (":(")
            num_of_tries += 1
            print_hangman (num_of_tries)
        print ()
        print (show_hidden_word(secret_word, old_letters_guessed))
        is_win = check_win(secret_word, old_letters_guessed)
            
    if not is_win:
        print_lose()
        

if __name__ == "__main__":
    main()
